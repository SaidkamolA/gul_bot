from aiogram import Router, Bot
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.types.input_file import BufferedInputFile  # Use BufferedInputFile instead
from aiogram.filters import Command
import requests
from config import ADMIN_CHAT_ID, BACKEND_URL

router = Router()

# Handle "/start" command
@router.message(Command("start"))
async def handle_start(message: Message, bot: Bot):
    if message.chat.id != ADMIN_CHAT_ID:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìú –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ", callback_data="view_approved")],
        [InlineKeyboardButton(text="üö´ –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ", callback_data="view_rejected")],
        [InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ", callback_data="view_pending")]
    ])

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–±–æ—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# Handle "Approve" / "Reject" button presses
@router.callback_query(lambda c: c.data.startswith(('approve_', 'reject_')))
async def handle_approval(callback_query: CallbackQuery, bot: Bot):
    action, order_id = callback_query.data.split('_', 1)
    status = "approved" if action == "approve" else "rejected"

    try:
        response = requests.patch(
            f"{BACKEND_URL}{order_id}/",
            json={'status': status},
            headers={'Content-Type': 'application/json'}
        )
        response.raise_for_status()

        await bot.answer_callback_query(callback_query.id, f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {status}")
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=None
        )
    except requests.RequestException as e:
        error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)} - Response: {e.response.text if e.response else 'No response'}"
        print(error_msg)
        await bot.answer_callback_query(callback_query.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")

# Handlers for viewing orders by status
@router.callback_query(lambda c: c.data in ['view_approved', 'view_rejected', 'view_pending'])
async def handle_view_orders(callback_query: CallbackQuery, bot: Bot):
    status_map = {
        'view_approved': 'approved',
        'view_rejected': 'rejected',
        'view_pending': 'pending'
    }
    status = status_map[callback_query.data]

    try:
        response = requests.get(f"{BACKEND_URL}?status={status}")
        response.raise_for_status()
        orders = response.json()

        if not orders:
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'."
            )
        else:
            if status == 'pending':
                # For pending orders, send each with receipt and buttons
                base_url = BACKEND_URL.replace('/api/orders/', '')  # e.g., http://192.168.0.108:8000/
                for order in orders:
                    caption = (
                        f"üõí –ó–∞–∫–∞–∑ #{order['id']}\n"
                        f"–ò–º—è: {order['name']}\n"
                        f"–í—Ä–µ–º—è: {order['created_at']}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
                        f"–¢–æ–≤–∞—Ä: {order['product']}\n"
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}\n"
                        f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
                    )
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{order['id']}")],
                        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order['id']}")]
                    ])
                    receipt_url = order['receipt'] if order['receipt'].startswith('http') else f"{base_url}{order['receipt']}"

                    try:
                        print(f"Fetching receipt from: {receipt_url}")
                        receipt_response = requests.get(receipt_url)
                        receipt_response.raise_for_status()

                        # Use BufferedInputFile for in-memory bytes
                        receipt_file = BufferedInputFile(receipt_response.content, filename=f"receipt_{order['id']}.jpg")
                        await bot.send_photo(
                            chat_id=ADMIN_CHAT_ID,
                            photo=receipt_file,
                            caption=caption,
                            reply_markup=keyboard
                        )
                    except requests.RequestException as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞: {e}")
                        await bot.send_message(
                            chat_id=ADMIN_CHAT_ID,
                            text=f"{caption}\n–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫.",
                            reply_markup=keyboard
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                        await bot.send_message(
                            chat_id=ADMIN_CHAT_ID,
                            text=f"{caption}\n–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫.",
                            reply_markup=keyboard
                        )
            else:
                # For approved/rejected, send as a single text message
                message = f"–ó–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}':\n\n"
                for order in orders:
                    message += (
                        f"–ó–∞–∫–∞–∑ #{order['id']}\n"
                        f"–ò–º—è: {order['name']}\n"
                        f"–í—Ä–µ–º—è: {order['created_at']}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
                        f"–¢–æ–≤–∞—Ä: {order['product']}\n"
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}\n"
                        f"–°—Ç–∞—Ç—É—Å: {order['status']}\n\n"
                    )
                await bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=message
                )
        await bot.answer_callback_query(callback_query.id)
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'."
        )
        await bot.answer_callback_query(callback_query.id)

# Function to send order to Telegram admin
async def send_order_to_admin(bot: Bot, order):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{order['id']}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order['id']}")]
    ])

    caption = (
        f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order['id']}\n"
        f"–ò–º—è: {order['name']}\n"
        f"–í—Ä–µ–º—è: {order['created_at']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
        f"–¢–æ–≤–∞—Ä: {order['product']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}\n"
    )

    # Construct the correct receipt URL
    base_url = BACKEND_URL.replace('/api/orders/', '')  # e.g., http://192.168.0.108:8000/
    receipt_url = order['receipt'] if order['receipt'].startswith('http') else f"{base_url}{order['receipt']}"

    try:
        print(f"Fetching receipt from: {receipt_url}")  # Debug log
        receipt_response = requests.get(receipt_url)
        receipt_response.raise_for_status()

        # Use BufferedInputFile for in-memory bytes
        receipt_file = BufferedInputFile(receipt_response.content, filename=f"receipt_{order['id']}.jpg")
        await bot.send_photo(
            chat_id=ADMIN_CHAT_ID,
            photo=receipt_file,
            caption=caption,
            reply_markup=keyboard
        )
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞: {e}")
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"{caption}\n–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫.",
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"{caption}\n–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫.",
            reply_markup=keyboard
        )

