from aiogram import Router, Bot, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.types.input_file import BufferedInputFile
from aiogram.filters import Command
import requests
from datetime import datetime, timedelta
from config import ADMIN_CHAT_ID, BACKEND_URL
from collections import defaultdict
import pandas as pd
import io
import os
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.chart import BarChart, Reference, PieChart
from openpyxl.utils import get_column_letter
from openpyxl.chart.label import DataLabelList

router = Router()
sent_order_ids = set()  # To track sent orders and avoid duplicates
ORDERS_PER_PAGE = 5  # Number of orders to show per page

# List of admin IDs
ADMIN_IDS = {714948319, 6094832311, 575262312, ADMIN_CHAT_ID}  # Add your admin ID here

# Bot commands
COMMANDS = {
    'start': 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å',
    'help': '‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
    'stats': 'üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
    'orders': 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã',
    'pending': '‚è≥ –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã',
    'approved': '‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã',
    'rejected': '‚ùå –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã',
    'customers': 'üë• –ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Å—Ç—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
    'finance': 'üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞',
    'products': 'üì¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º',
    'download': 'üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç'
}

# Helper function to format timestamp
def format_timestamp(timestamp: str) -> str:
    try:
        dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
        return dt.strftime('%d.%m.%Y %H:%M:%S')
    except ValueError:
        return timestamp

# Helper function to get statistics
async def get_statistics():
    try:
        response = requests.get(BACKEND_URL)
        response.raise_for_status()
        orders = response.json()
        
        stats = {
            'total': len(orders),
            'approved': 0,
            'rejected': 0,
            'pending': 0,
            'total_quantity': 0,
            'products': defaultdict(int),
            'customers': defaultdict(int)  # Track customer orders
        }
        
        for order in orders:
            stats[order['status']] += 1
            stats['total_quantity'] += order['quantity']
            stats['products'][order['product']] += order['quantity']
            stats['customers'][order['phone']] += 1
            
        return stats
    except Exception as e:
        print(f"Error getting statistics: {e}")
        return None

# Helper function to apply styles to worksheet
def apply_styles(worksheet, title, data_start_row=2):
    # Define styles
    header_font = Font(bold=True, color="FFFFFF", size=12)
    header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")  # Dark blue
    title_font = Font(bold=True, size=14, color="1F4E78")  # Dark blue
    title_fill = PatternFill(start_color="D9E1F2", end_color="D9E1F2", fill_type="solid")  # Light blue
    data_font = Font(size=11)
    border = Border(
        left=Side(style='thin', color='B4C6E7'),
        right=Side(style='thin', color='B4C6E7'),
        top=Side(style='thin', color='B4C6E7'),
        bottom=Side(style='thin', color='B4C6E7')
    )
    center_alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
    left_alignment = Alignment(horizontal='left', vertical='center', wrap_text=True)
    right_alignment = Alignment(horizontal='right', vertical='center', wrap_text=True)

    # Apply title
    title_cell = worksheet.cell(row=1, column=1, value=title)
    title_cell.font = title_font
    title_cell.fill = title_fill
    title_cell.alignment = center_alignment
    worksheet.merge_cells(start_row=1, start_column=1, end_row=1, end_column=worksheet.max_column)

    # Apply header styles
    for cell in worksheet[data_start_row]:
        cell.font = header_font
        cell.fill = header_fill
        cell.alignment = center_alignment
        cell.border = border

    # Apply data styles
    for row in worksheet.iter_rows(min_row=data_start_row + 1, max_row=worksheet.max_row):
        for cell in row:
            cell.font = data_font
            cell.border = border
            # Align numbers to the right, text to the left
            if isinstance(cell.value, (int, float)):
                cell.alignment = right_alignment
            else:
                cell.alignment = left_alignment

    # Auto-adjust column widths with some padding
    for column in worksheet.columns:
        max_length = 0
        column = [cell for cell in column]
        for cell in column:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(str(cell.value))
            except:
                pass
        adjusted_width = (max_length + 4)  # Add more padding
        worksheet.column_dimensions[get_column_letter(column[0].column)].width = adjusted_width

    # Freeze the header row
    worksheet.freeze_panes = f"A{data_start_row + 1}"

# Helper function to calculate order price and profit
def calculate_order_price_and_profit(product: str, quantity: int) -> tuple:
    prices = {
        'Ortacha gulqand': 40000,  # –°—Ä–µ–¥–Ω–∏–π –ì—É–ª–∫–∞–Ω–¥
        'Katta gulqand': 50000     # –ë–æ–ª—å—à–æ–π –ì—É–ª–∫–∞–Ω–¥
    }
    costs = {
        'Ortacha gulqand': 20000,  # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ä–µ–¥–Ω–µ–≥–æ
        'Katta gulqand': 25000     # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –±–æ–ª—å—à–æ–≥–æ
    }
    price = prices.get(product, 0) * quantity
    cost = costs.get(product, 0) * quantity
    profit = price - cost
    return price, profit

# Helper function to generate Excel file
async def generate_excel_file():
    try:
        response = requests.get(BACKEND_URL)
        response.raise_for_status()
        orders = response.json()
        
        # Create DataFrame
        df = pd.DataFrame(orders)
        
        # Convert timestamp to readable format
        df['created_at'] = pd.to_datetime(df['created_at']).dt.strftime('%d.%m.%Y %H:%M:%S')
        
        # Calculate price and profit for each order
        df[['price', 'profit']] = df.apply(
            lambda x: pd.Series(calculate_order_price_and_profit(x['product'], x['quantity'])), 
            axis=1
        )
        
        # Reorder columns
        df = df[['id', 'name', 'phone', 'product', 'quantity', 'price', 'profit', 'status', 'created_at']]
        
        # Rename columns
        df.columns = ['ID', '–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', '–¢–æ–≤–∞—Ä', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—É–º–º–∞', '–ü—Ä–∏–±—ã–ª—å', '–°—Ç–∞—Ç—É—Å', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è']
        
        # Create Excel file in memory
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            # Sheet 1: All Orders
            df.to_excel(writer, index=False, sheet_name='–ó–∞–∫–∞–∑—ã')
            worksheet = writer.sheets['–ó–∞–∫–∞–∑—ã']
            apply_styles(worksheet, "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤")

            # Sheet 2: Statistics
            # Calculate statistics
            total_orders = len(orders)
            approved_orders = len(df[df["–°—Ç–∞—Ç—É—Å"] == "approved"])
            rejected_orders = len(df[df["–°—Ç–∞—Ç—É—Å"] == "rejected"])
            pending_orders = len(df[df["–°—Ç–∞—Ç—É—Å"] == "pending"])
            total_quantity = df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"].sum()
            total_revenue = df[df["–°—Ç–∞—Ç—É—Å"] == "approved"]["–°—É–º–º–∞"].sum()
            total_profit = df[df["–°—Ç–∞—Ç—É—Å"] == "approved"]["–ü—Ä–∏–±—ã–ª—å"].sum()
            
            # Create statistics DataFrame
            stats_data = {
                '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': [
                    '–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤',
                    '–û–¥–æ–±—Ä–µ–Ω–æ',
                    '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
                    '–û–∂–∏–¥–∞–µ—Ç',
                    '–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤',
                    '–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞',
                    '–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å'
                ],
                '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                    total_orders,
                    approved_orders,
                    rejected_orders,
                    pending_orders,
                    total_quantity,
                    f"{total_revenue:,.0f} —Å—É–º",
                    f"{total_profit:,.0f} —Å—É–º"
                ]
            }
            
            # Add product prices
            prices_data = {
                '–¢–æ–≤–∞—Ä': ['–ë–æ–ª—å—à–æ–π –ì—É–ª–∫–∞–Ω–¥', '–°—Ä–µ–¥–Ω–∏–π –ì—É–ª–∫–∞–Ω–¥'],
                '–¶–µ–Ω–∞': ['50,000 —Å—É–º', '40,000 —Å—É–º'],
                '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å': ['25,000 —Å—É–º', '20,000 —Å—É–º'],
                '–ú–∞—Ä–∂–∞': ['25,000 —Å—É–º', '20,000 —Å—É–º']
            }
            
            # Add popular products
            product_stats = df.groupby('–¢–æ–≤–∞—Ä').agg({
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': 'sum',
                '–°—É–º–º–∞': 'sum',
                '–ü—Ä–∏–±—ã–ª—å': 'sum'
            }).reset_index()
            product_stats = product_stats.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', ascending=False)
            
            # Create statistics sheet
            stats_df = pd.DataFrame(stats_data)
            stats_df.to_excel(writer, index=False, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', startrow=0)
            
            # Add prices information
            prices_df = pd.DataFrame(prices_data)
            prices_df.to_excel(writer, index=False, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', startrow=len(stats_data) + 3)
            
            # Add product statistics
            product_stats.to_excel(writer, index=False, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', startrow=len(stats_data) + len(prices_data) + 6)
            
            worksheet = writer.sheets['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
            apply_styles(worksheet, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤")

            # Add pie chart for status distribution
            pie = PieChart()
            pie.title = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤"
            pie.style = 10
            pie.height = 10
            pie.width = 15
            
            data_labels = DataLabelList()
            data_labels.showVal = True
            data_labels.showPercent = True
            pie.dLbls = data_labels
            
            # Create data for pie chart
            status_data = pd.DataFrame({
                '–°—Ç–∞—Ç—É—Å': ['–û–¥–æ–±—Ä–µ–Ω–æ', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ', '–û–∂–∏–¥–∞–µ—Ç'],
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [approved_orders, rejected_orders, pending_orders]
            })
            status_data.to_excel(writer, index=False, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 
                               startrow=len(stats_data) + len(prices_data) + len(product_stats) + 9)
            
            data = Reference(worksheet, 
                           min_col=2, 
                           min_row=len(stats_data) + len(prices_data) + len(product_stats) + 10,
                           max_row=len(stats_data) + len(prices_data) + len(product_stats) + 12,
                           max_col=2)
            categories = Reference(worksheet,
                                min_col=1,
                                min_row=len(stats_data) + len(prices_data) + len(product_stats) + 10,
                                max_row=len(stats_data) + len(prices_data) + len(product_stats) + 12)
            
            pie.add_data(data, titles_from_data=True)
            pie.set_categories(categories)
            worksheet.add_chart(pie, "E2")

            # Add pie chart for product distribution
            product_pie = PieChart()
            product_pie.title = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –ø–æ —Ç–æ–≤–∞—Ä–∞–º"
            product_pie.style = 10
            product_pie.height = 10
            product_pie.width = 15
            
            product_data_labels = DataLabelList()
            product_data_labels.showVal = True
            product_data_labels.showPercent = True
            product_pie.dLbls = product_data_labels
            
            # Create data for product pie chart
            product_distribution = df[df['–°—Ç–∞—Ç—É—Å'] == 'approved'].groupby('–¢–æ–≤–∞—Ä')['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum().reset_index()
            product_distribution.to_excel(writer, index=False, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 
                                        startrow=len(stats_data) + len(prices_data) + len(product_stats) + 15)
            
            product_data = Reference(worksheet,
                                  min_col=2,
                                  min_row=len(stats_data) + len(prices_data) + len(product_stats) + 16,
                                  max_row=len(stats_data) + len(prices_data) + len(product_stats) + 17,
                                  max_col=2)
            product_categories = Reference(worksheet,
                                        min_col=1,
                                        min_row=len(stats_data) + len(prices_data) + len(product_stats) + 16,
                                        max_row=len(stats_data) + len(prices_data) + len(product_stats) + 17)
            
            product_pie.add_data(product_data, titles_from_data=True)
            product_pie.set_categories(product_categories)
            worksheet.add_chart(product_pie, "E20")

            # Add bar chart for popular products
            chart = BarChart()
            chart.title = "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"
            chart.y_axis.title = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
            chart.x_axis.title = "–¢–æ–≤–∞—Ä"
            
            data = Reference(worksheet,
                           min_col=2,
                           min_row=len(stats_data) + len(prices_data) + 7,
                           max_row=len(stats_data) + len(prices_data) + len(product_stats) + 6,
                           max_col=2)
            categories = Reference(worksheet,
                                min_col=1,
                                min_row=len(stats_data) + len(prices_data) + 7,
                                max_row=len(stats_data) + len(prices_data) + len(product_stats) + 6)
            
            chart.add_data(data, titles_from_data=True)
            chart.set_categories(categories)
            worksheet.add_chart(chart, "E38")
        
        output.seek(0)
        return output
    except Exception as e:
        print(f"Error generating Excel file: {e}")
        return None

# Handle "/start" command
@router.message(Command("start"))
async def handle_start(message: Message, bot: Bot):
    if message.chat.id not in ADMIN_IDS:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="view_stats")],
        [InlineKeyboardButton(text="üìú –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ", callback_data="view_approved_1")],
        [InlineKeyboardButton(text="üö´ –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ", callback_data="view_rejected_1")],
        [InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ", callback_data="view_pending_1")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ ID", callback_data="search_by_id")],
        [InlineKeyboardButton(text="üì± –ß–∞—Å—Ç—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", callback_data="view_customers")],
        [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="download_stats")],
        [InlineKeyboardButton(text="üìÖ –ó–∞–∫–∞–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data="select_period")],
        [InlineKeyboardButton(text="üìà –¢–æ–ø —Ç–æ–≤–∞—Ä—ã", callback_data="top_products")],
        [InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞", callback_data="financial_summary")]
    ])

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# Handle "/help" command
@router.message(Command("help"))
async def handle_help(message: Message, bot: Bot):
    if message.chat.id not in ADMIN_IDS:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        return

    help_text = "üìù –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
    for cmd, desc in COMMANDS.items():
        help_text += f"/{cmd} - {desc}\n"

    await message.answer(help_text)

# Handle "/stats" command
@router.message(Command("stats"))
async def handle_stats_command(message: Message, bot: Bot):
    if message.chat.id not in ADMIN_IDS:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        return

    stats = await get_statistics()
    if not stats:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return

    message_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total']}\n"
        f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved']}\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']}\n"
        f"‚è≥ –û–∂–∏–¥–∞–µ—Ç: {stats['pending']}\n"
        f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats['total_quantity']}\n\n"
        "üìà –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
    )
    
    for product, quantity in sorted(stats['products'].items(), key=lambda x: x[1], reverse=True)[:5]:
        message_text += f"‚Ä¢ {product}: {quantity} —à—Ç.\n"

    await message.answer(message_text)

# Handle "/orders" command
@router.message(Command("orders"))
async def handle_orders_command(message: Message, bot: Bot):
    if message.chat.id not in ADMIN_IDS:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìú –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ", callback_data="view_approved_1")],
        [InlineKeyboardButton(text="üö´ –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ", callback_data="view_rejected_1")],
        [InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ", callback_data="view_pending_1")]
    ])

    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )

# Handle "/pending" command
@router.message(Command("pending"))
async def handle_pending_command(message: Message, bot: Bot):
    if message.chat.id not in ADMIN_IDS:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        return
    
    try:
        response = requests.get(BACKEND_URL)
        response.raise_for_status()
        orders = response.json()
        
        # Filter pending orders
        pending_orders = [order for order in orders if order['status'] == 'pending']
        
        if not pending_orders:
            await message.answer(
                "‚ùå –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
            return
        
        # Show first page of pending orders
        page = 1
        orders_per_page = 5
        start_idx = (page - 1) * orders_per_page
        end_idx = start_idx + orders_per_page
        current_orders = pending_orders[start_idx:end_idx]
        
        message_text = f"üìã –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):\n\n"
        
        for order in current_orders:
            price, profit = calculate_order_price_and_profit(order['product'], order['quantity'])
            message_text += (
                f"üÜî {order['id']}\n"
                f"üë§ {order['name']}\n"
                f"üì± {order['phone']}\n"
                f"üì¶ {order['product']} x{order['quantity']}\n"
                f"üí∞ {price:,.0f} —Å—É–º\n"
                f"üìÖ {datetime.fromisoformat(order['created_at'].replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')}\n\n"
            )
        
        # Add navigation buttons
        keyboard = []
        if len(pending_orders) > orders_per_page:
            keyboard.append([
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"view_pending_{page-1}"),
                InlineKeyboardButton(text=f"{page}/{(len(pending_orders)-1)//orders_per_page + 1}", callback_data="page"),
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"view_pending_{page+1}")
            ])
        
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        await message.answer(
            text=message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        print(f"Error handling pending orders: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )

# Handle "/approved" command
@router.message(Command("approved"))
async def handle_approved_command(message: Message, bot: Bot):
    if message.chat.id not in ADMIN_IDS:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        return
    
    try:
        response = requests.get(BACKEND_URL)
        response.raise_for_status()
        orders = response.json()
        
        # Filter approved orders
        approved_orders = [order for order in orders if order['status'] == 'approved']
        
        if not approved_orders:
            await message.answer(
                "‚ùå –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
            return
        
        # Show first page of approved orders
        page = 1
        orders_per_page = 5
        start_idx = (page - 1) * orders_per_page
        end_idx = start_idx + orders_per_page
        current_orders = approved_orders[start_idx:end_idx]
        
        message_text = f"üìã –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):\n\n"
        
        for order in current_orders:
            price, profit = calculate_order_price_and_profit(order['product'], order['quantity'])
            message_text += (
                f"üÜî {order['id']}\n"
                f"üë§ {order['name']}\n"
                f"üì± {order['phone']}\n"
                f"üì¶ {order['product']} x{order['quantity']}\n"
                f"üí∞ {price:,.0f} —Å—É–º\n"
                f"üìÖ {datetime.fromisoformat(order['created_at'].replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')}\n\n"
            )
        
        # Add navigation buttons
        keyboard = []
        if len(approved_orders) > orders_per_page:
            keyboard.append([
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"view_approved_{page-1}"),
                InlineKeyboardButton(text=f"{page}/{(len(approved_orders)-1)//orders_per_page + 1}", callback_data="page"),
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"view_approved_{page+1}")
            ])
        
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        await message.answer(
            text=message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        print(f"Error handling approved orders: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )

# Handle "/rejected" command
@router.message(Command("rejected"))
async def handle_rejected_command(message: Message, bot: Bot):
    if message.chat.id not in ADMIN_IDS:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        return
    
    try:
        response = requests.get(BACKEND_URL)
        response.raise_for_status()
        orders = response.json()
        
        # Filter rejected orders
        rejected_orders = [order for order in orders if order['status'] == 'rejected']
        
        if not rejected_orders:
            await message.answer(
                "‚ùå –ù–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
            return
        
        # Show first page of rejected orders
        page = 1
        orders_per_page = 5
        start_idx = (page - 1) * orders_per_page
        end_idx = start_idx + orders_per_page
        current_orders = rejected_orders[start_idx:end_idx]
        
        message_text = f"üìã –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):\n\n"
        
        for order in current_orders:
            price, profit = calculate_order_price_and_profit(order['product'], order['quantity'])
            message_text += (
                f"üÜî {order['id']}\n"
                f"üë§ {order['name']}\n"
                f"üì± {order['phone']}\n"
                f"üì¶ {order['product']} x{order['quantity']}\n"
                f"üí∞ {price:,.0f} —Å—É–º\n"
                f"üìÖ {datetime.fromisoformat(order['created_at'].replace('Z', '+00:00')).strftime('%d.%m.%Y %H:%M')}\n\n"
            )
        
        # Add navigation buttons
        keyboard = []
        if len(rejected_orders) > orders_per_page:
            keyboard.append([
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"view_rejected_{page-1}"),
                InlineKeyboardButton(text=f"{page}/{(len(rejected_orders)-1)//orders_per_page + 1}", callback_data="page"),
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"view_rejected_{page+1}")
            ])
        
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        await message.answer(
            text=message_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        print(f"Error handling rejected orders: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )

# Handle "/customers" command
@router.message(Command("customers"))
async def handle_customers_command(message: Message, bot: Bot):
    if message.chat.id not in ADMIN_IDS:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        return

    stats = await get_statistics()
    if not stats:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        return

    # Get top 10 customers
    top_customers = sorted(stats['customers'].items(), key=lambda x: x[1], reverse=True)[:10]
    
    message_text = "üì± –¢–æ–ø 10 —á–∞—Å—Ç—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"
    for i, (phone, orders) in enumerate(top_customers, 1):
        message_text += f"{i}. {phone}: {orders} –∑–∞–∫–∞–∑–æ–≤\n"

    await message.answer(message_text)

# Handle "/finance" command
@router.message(Command("finance"))
async def handle_finance_command(message: Message, bot: Bot):
    if message.chat.id not in ADMIN_IDS:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        return
    
    try:
        response = requests.get(BACKEND_URL)
        response.raise_for_status()
        orders = response.json()
        
        # Calculate financial metrics
        total_revenue = 0
        total_profit = 0
        daily_revenue = defaultdict(int)
        daily_profit = defaultdict(int)
        product_stats = defaultdict(lambda: {'quantity': 0, 'revenue': 0, 'profit': 0})
        
        for order in orders:
            if order['status'] == 'approved':
                price, profit = calculate_order_price_and_profit(order['product'], order['quantity'])
                total_revenue += price
                total_profit += profit
                
                # Group by date
                date = datetime.fromisoformat(order['created_at'].replace('Z', '+00:00')).strftime('%Y-%m-%d')
                daily_revenue[date] += price
                daily_profit[date] += profit
                
                # Group by product
                product_stats[order['product']]['quantity'] += order['quantity']
                product_stats[order['product']]['revenue'] += price
                product_stats[order['product']]['profit'] += profit
        
        # Calculate average daily revenue and profit
        avg_daily_revenue = total_revenue / len(daily_revenue) if daily_revenue else 0
        avg_daily_profit = total_profit / len(daily_profit) if daily_profit else 0
        
        message_text = (
            "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞:\n\n"
            f"üìà –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.0f} —Å—É–º\n"
            f"üíµ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:,.0f} —Å—É–º\n"
            f"üìä –°—Ä–µ–¥–Ω—è—è –¥–Ω–µ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {avg_daily_revenue:,.0f} —Å—É–º\n"
            f"üìä –°—Ä–µ–¥–Ω—è—è –¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {avg_daily_profit:,.0f} —Å—É–º\n\n"
            "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º:\n"
        )
        
        # Add product statistics
        for product, stats in product_stats.items():
            message_text += (
                f"üì¶ {product}:\n"
                f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stats['quantity']} —à—Ç.\n"
                f"   ‚Ä¢ –í—ã—Ä—É—á–∫–∞: {stats['revenue']:,.0f} —Å—É–º\n"
                f"   ‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {stats['profit']:,.0f} —Å—É–º\n\n"
            )
        
        # Show last 7 days
        message_text += "üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"
        last_7_days = sorted(daily_revenue.items(), reverse=True)[:7]
        for date, revenue in last_7_days:
            profit = daily_profit[date]
            message_text += (
                f"üìÖ {date}: "
                f"üí∞ {revenue:,.0f} —Å—É–º | "
                f"üíµ {profit:,.0f} —Å—É–º\n"
            )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data="download_financial")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await message.answer(
            text=message_text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        print(f"Error handling financial summary: {e}")
        await message.answer(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )

# Handle "/products" command
@router.message(Command("products"))
async def handle_products_command(message: Message, bot: Bot):
    if message.chat.id not in ADMIN_IDS:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        return
    
    try:
        response = requests.get(BACKEND_URL)
        response.raise_for_status()
        orders = response.json()
        
        # Calculate product statistics
        product_stats = defaultdict(lambda: {'quantity': 0, 'revenue': 0, 'profit': 0})
        
        for order in orders:
            if order['status'] == 'approved':
                price, profit = calculate_order_price_and_profit(order['product'], order['quantity'])
                product_stats[order['product']]['quantity'] += order['quantity']
                product_stats[order['product']]['revenue'] += price
                product_stats[order['product']]['profit'] += profit
        
        # Sort by quantity
        sorted_products = sorted(product_stats.items(), key=lambda x: x[1]['quantity'], reverse=True)
        
        message_text = "üìà –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        
        for product, stats in sorted_products:
            message_text += (
                f"üì¶ {product}:\n"
                f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stats['quantity']} —à—Ç.\n"
                f"   ‚Ä¢ –í—ã—Ä—É—á–∫–∞: {stats['revenue']:,.0f} —Å—É–º\n"
                f"   ‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {stats['profit']:,.0f} —Å—É–º\n"
                f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats['revenue']/stats['quantity']:,.0f} —Å—É–º\n\n"
            )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data="download_products")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await message.answer(
            text=message_text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        print(f"Error handling top products: {e}")
        await message.answer(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )

# Handle "/download" command
@router.message(Command("download"))
async def handle_download_command(message: Message, bot: Bot):
    if message.chat.id not in ADMIN_IDS:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        return
    
    try:
        await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞...")
        
        excel_file = await generate_excel_file()
        if not excel_file:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return

        # Send the Excel file
        file = BufferedInputFile(
            excel_file.getvalue(),
            filename=f"statistics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        )
        
        await bot.send_document(
            chat_id=message.chat.id,
            document=file,
            caption="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        await message.answer(
            text="‚úÖ –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω",
            reply_markup=keyboard
        )
        
    except Exception as e:
        print(f"Error generating Excel file: {e}")
        await message.answer(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )

# Handle search by ID
@router.callback_query(lambda c: c.data == "search_by_id")
async def handle_search_prompt(callback_query: CallbackQuery, bot: Bot):
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="üîç –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )
    await bot.answer_callback_query(callback_query.id)

# Handle search by ID message
@router.message(F.text.regexp(r'^\d+$'))
async def handle_search_by_id(message: Message, bot: Bot):
    if message.chat.id not in ADMIN_IDS:
        return

    order_id = message.text
    try:
        response = requests.get(f"{BACKEND_URL}{order_id}/")
        response.raise_for_status()
        order = response.json()

        caption = (
            f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ ID: {order_id}\n\n"
            f"üÜî ID: {order_id}\n"
            f"üë§ –ò–º—è: {order['name']}\n"
            f"üìÖ –í—Ä–µ–º—è: {format_timestamp(order['created_at'])}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {order['product']}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}\n"
            f"üìù –°—Ç–∞—Ç—É—Å: {order['status']}\n"
        )

        keyboard_buttons = []
        if order['status'] == 'pending':
            keyboard_buttons.append([
                InlineKeyboardButton(text=f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {order_id}", callback_data=f"approve_{order_id}"),
                InlineKeyboardButton(text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {order_id}", callback_data=f"reject_{order_id}")
            ])

        base_url = BACKEND_URL.replace('/api/orders/', '')
        receipt_url = order['receipt'] if order['receipt'].startswith('http') else f"{base_url}{order['receipt']}"

        try:
            receipt_response = requests.get(receipt_url)
            receipt_response.raise_for_status()

            receipt_file = BufferedInputFile(receipt_response.content, filename=f"receipt_{order_id}.jpg")
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=receipt_file,
                caption=caption,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
            )
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞: {e} –¥–ª—è Order ID: {order_id}")
            await bot.send_message(
                chat_id=message.chat.id,
                text=f"{caption}\n‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e} –¥–ª—è Order ID: {order_id}")
            await bot.send_message(
                chat_id=message.chat.id,
                text=f"{caption}\n‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
            )

        # Add back button
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        await bot.send_message(
            chat_id=message.chat.id,
            text="üîç –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω",
            reply_markup=keyboard
        )

    except requests.RequestException as e:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"‚ùå –ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=keyboard
        )

# Handle "Approve" / "Reject" button presses
@router.callback_query(lambda c: c.data.startswith(('approve_', 'reject_')))
async def handle_approval(callback_query: CallbackQuery, bot: Bot):
    action, order_id = callback_query.data.split('_', 1)
    status = "approved" if action == "approve" else "rejected"

    try:
        response = requests.patch(
            f"{BACKEND_URL}{order_id}/",
            json={'status': status},
            headers={'Content-Type': 'application/json'}
        )
        response.raise_for_status()

        await bot.answer_callback_query(callback_query.id, f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {status}")
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=None
        )
        if order_id in sent_order_ids:
            sent_order_ids.remove(order_id)
    except requests.RequestException as e:
        error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)} - Response: {e.response.text if e.response else 'No response'}"
        print(error_msg)
        await bot.answer_callback_query(callback_query.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")

# Handlers for viewing orders by status with pagination
@router.callback_query(lambda c: c.data.startswith(('view_approved_', 'view_rejected_', 'view_pending_', 'back_to_main')))
async def handle_view_orders(callback_query: CallbackQuery, bot: Bot):
    if callback_query.data == "back_to_main":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="view_stats")],
            [InlineKeyboardButton(text="üìú –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ", callback_data="view_approved_1")],
            [InlineKeyboardButton(text="üö´ –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ", callback_data="view_rejected_1")],
            [InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ", callback_data="view_pending_1")],
            [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ ID", callback_data="search_by_id")],
            [InlineKeyboardButton(text="üì± –ß–∞—Å—Ç—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", callback_data="view_customers")],
            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="download_stats")],
            [InlineKeyboardButton(text="üìÖ –ó–∞–∫–∞–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data="select_period")],
            [InlineKeyboardButton(text="üìà –¢–æ–ø —Ç–æ–≤–∞—Ä—ã", callback_data="top_products")],
            [InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞", callback_data="financial_summary")]
        ])
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        return

    # Split the callback data correctly
    parts = callback_query.data.split('_')
    status = f"{parts[0]}_{parts[1]}"  # e.g., "view_approved"
    page = int(parts[2])  # e.g., "1"

    status_map = {
        'view_approved': 'approved',
        'view_rejected': 'rejected',
        'view_pending': 'pending'
    }
    current_status = status_map[status]

    try:
        response = requests.get(f"{BACKEND_URL}?status={current_status}")
        response.raise_for_status()
        orders = response.json()

        if not orders:
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=f"‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{current_status}'.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
            return

        total_pages = (len(orders) + ORDERS_PER_PAGE - 1) // ORDERS_PER_PAGE
        start_idx = (page - 1) * ORDERS_PER_PAGE
        end_idx = min(start_idx + ORDERS_PER_PAGE, len(orders))
        current_orders = orders[start_idx:end_idx]

        base_url = BACKEND_URL.replace('/api/orders/', '')
        
        for order in current_orders:
            order_id = str(order['id'])
            caption = (
                f"üìã –ó–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{current_status}'\n\n"
                f"üÜî ID: {order_id}\n"
                f"üë§ –ò–º—è: {order['name']}\n"
                f"üìÖ –í—Ä–µ–º—è: {format_timestamp(order['created_at'])}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {order['product']}\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}\n"
                f"üìù –°—Ç–∞—Ç—É—Å: {order['status']}\n"
            )

            keyboard_buttons = []
            if current_status == 'pending':
                keyboard_buttons.append([
                    InlineKeyboardButton(text=f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {order_id}", callback_data=f"approve_{order_id}"),
                    InlineKeyboardButton(text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {order_id}", callback_data=f"reject_{order_id}")
                ])

            receipt_url = order['receipt'] if order['receipt'].startswith('http') else f"{base_url}{order['receipt']}"

            try:
                receipt_response = requests.get(receipt_url)
                receipt_response.raise_for_status()

                receipt_file = BufferedInputFile(receipt_response.content, filename=f"receipt_{order_id}.jpg")
                await bot.send_photo(
                    chat_id=callback_query.message.chat.id,
                    photo=receipt_file,
                    caption=caption,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
                )
            except requests.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞: {e} –¥–ª—è Order ID: {order_id}")
                await bot.send_message(
                    chat_id=callback_query.message.chat.id,
                    text=f"{caption}\n‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e} –¥–ª—è Order ID: {order_id}")
                await bot.send_message(
                    chat_id=callback_query.message.chat.id,
                    text=f"{caption}\n‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
                )

        # Add pagination buttons
        pagination_buttons = []
        if page > 1:
            pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{status}_{page-1}"))
        if page < total_pages:
            pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"{status}_{page+1}"))
        
        if pagination_buttons:
            keyboard_buttons = [pagination_buttons]
            keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text=f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            )
        else:
            keyboard_buttons = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text="üìÑ –ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            )

        await bot.answer_callback_query(callback_query.id)
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{current_status}'.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )
        await bot.answer_callback_query(callback_query.id)

# Handle frequent customers view
@router.callback_query(lambda c: c.data == "view_customers")
async def handle_customers(callback_query: CallbackQuery, bot: Bot):
    stats = await get_statistics()
    if not stats:
        await bot.answer_callback_query(callback_query.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        return

    # Get top 10 customers
    top_customers = sorted(stats['customers'].items(), key=lambda x: x[1], reverse=True)[:10]
    
    message = "üì± –¢–æ–ø 10 —á–∞—Å—Ç—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"
    for i, (phone, orders) in enumerate(top_customers, 1):
        message += f"{i}. {phone}: {orders} –∑–∞–∫–∞–∑–æ–≤\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=message,
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)

# Handle Excel download
@router.callback_query(lambda c: c.data == "download_stats")
async def handle_download_stats(callback_query: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback_query.id, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞...")
    
    excel_file = await generate_excel_file()
    if not excel_file:
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        )
        return

    # Send the Excel file
    file = BufferedInputFile(
        excel_file.getvalue(),
        filename=f"statistics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    )
    
    await bot.send_document(
        chat_id=callback_query.message.chat.id,
        document=file,
        caption="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="‚úÖ –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω",
        reply_markup=keyboard
    )

# Handle statistics view
@router.callback_query(lambda c: c.data == "view_stats")
async def handle_statistics(callback_query: CallbackQuery, bot: Bot):
    stats = await get_statistics()
    if not stats:
        await bot.answer_callback_query(callback_query.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return

    message = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total']}\n"
        f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved']}\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']}\n"
        f"‚è≥ –û–∂–∏–¥–∞–µ—Ç: {stats['pending']}\n"
        f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats['total_quantity']}\n\n"
        "üìà –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
    )
    
    for product, quantity in sorted(stats['products'].items(), key=lambda x: x[1], reverse=True)[:5]:
        message += f"‚Ä¢ {product}: {quantity} —à—Ç.\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=message,
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)

# Function to send order to Telegram admin
async def send_order_to_admin(bot: Bot, order):
    order_id = str(order['id'])
    if order_id in sent_order_ids:
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{order_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")]
    ])

    caption = (
        f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"üÜî ID: {order_id}\n"
        f"üë§ –ò–º—è: {order['name']}\n"
        f"üìÖ –í—Ä–µ–º—è: {format_timestamp(order['created_at'])}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {order['product']}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}\n"
    )

    base_url = BACKEND_URL.replace('/api/orders/', '')
    receipt_url = order['receipt'] if order['receipt'].startswith('http') else f"{base_url}{order['receipt']}"

    try:
        receipt_response = requests.get(receipt_url)
        receipt_response.raise_for_status()

        receipt_file = BufferedInputFile(receipt_response.content, filename=f"receipt_{order_id}.jpg")
        await bot.send_photo(
            chat_id=ADMIN_CHAT_ID,
            photo=receipt_file,
            caption=caption,
            reply_markup=keyboard
        )
        sent_order_ids.add(order_id)
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞: {e} –¥–ª—è Order ID: {order_id}")
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"{caption}\n‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫.",
            reply_markup=keyboard
        )
        sent_order_ids.add(order_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e} –¥–ª—è Order ID: {order_id}")
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"{caption}\n‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫.",
            reply_markup=keyboard
        )
        sent_order_ids.add(order_id)

# Handle period selection
@router.callback_query(lambda c: c.data == "select_period")
async def handle_period_selection(callback_query: CallbackQuery, bot: Bot):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="period_today")],
        [InlineKeyboardButton(text="üìÖ –í—á–µ—Ä–∞", callback_data="period_yesterday")],
        [InlineKeyboardButton(text="üìÖ –ù–µ–¥–µ–ª—è", callback_data="period_week")],
        [InlineKeyboardButton(text="üìÖ –ú–µ—Å—è—Ü", callback_data="period_month")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤:",
        reply_markup=keyboard
    )

# Handle period selection
@router.callback_query(lambda c: c.data.startswith("period_"))
async def handle_period_orders(callback_query: CallbackQuery, bot: Bot):
    period = callback_query.data.split("_")[1]
    now = datetime.now()
    
    if period == "today":
        start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
        end_date = now
    elif period == "yesterday":
        start_date = (now - timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
        end_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
    elif period == "week":
        start_date = now - timedelta(days=7)
        end_date = now
    elif period == "month":
        start_date = now - timedelta(days=30)
        end_date = now
    
    try:
        response = requests.get(BACKEND_URL)
        response.raise_for_status()
        orders = response.json()
        
        # Filter orders by date
        filtered_orders = []
        for order in orders:
            # Convert order date to naive datetime for comparison
            order_date = datetime.fromisoformat(order['created_at'].replace('Z', '+00:00'))
            order_date = order_date.replace(tzinfo=None)  # Make it naive
            
            if start_date <= order_date <= end_date:
                filtered_orders.append(order)
        
        if not filtered_orders:
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=f"‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="select_period")]
                ])
            )
            return
        
        # Calculate statistics
        total_orders = len(filtered_orders)
        total_quantity = sum(order['quantity'] for order in filtered_orders)
        total_revenue = sum(calculate_order_price_and_profit(order['product'], order['quantity'])[0] 
                          for order in filtered_orders if order['status'] == 'approved')
        total_profit = sum(calculate_order_price_and_profit(order['product'], order['quantity'])[1] 
                         for order in filtered_orders if order['status'] == 'approved')
        
        # Group by product
        product_stats = defaultdict(lambda: {'quantity': 0, 'revenue': 0, 'profit': 0})
        for order in filtered_orders:
            if order['status'] == 'approved':
                price, profit = calculate_order_price_and_profit(order['product'], order['quantity'])
                product_stats[order['product']]['quantity'] += order['quantity']
                product_stats[order['product']]['revenue'] += price
                product_stats[order['product']]['profit'] += profit
        
        message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period}:\n\n"
            f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
            f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_quantity}\n"
            f"üí∞ –í—ã—Ä—É—á–∫–∞: {total_revenue:,.0f} —Å—É–º\n"
            f"üíµ –ü—Ä–∏–±—ã–ª—å: {total_profit:,.0f} —Å—É–º\n\n"
            "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º:\n"
        )
        
        # Add product statistics
        for product, stats in product_stats.items():
            message += (
                f"üì¶ {product}:\n"
                f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stats['quantity']} —à—Ç.\n"
                f"   ‚Ä¢ –í—ã—Ä—É—á–∫–∞: {stats['revenue']:,.0f} —Å—É–º\n"
                f"   ‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {stats['profit']:,.0f} —Å—É–º\n\n"
            )
        
        # Show last 5 orders
        message += "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n"
        for order in filtered_orders[-5:]:
            price, profit = calculate_order_price_and_profit(order['product'], order['quantity'])
            message += (
                f"üÜî {order['id']} | "
                f"üì¶ {order['product']} x{order['quantity']} | "
                f"üí∞ {price:,.0f} —Å—É–º | "
                f"üìù {order['status']}\n"
            )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data=f"download_period_{period}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="select_period")]
        ])
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=message,
            reply_markup=keyboard
        )
        
    except Exception as e:
        print(f"Error handling period orders: {e}")
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="select_period")]
            ])
        )

# Handle financial summary
@router.callback_query(lambda c: c.data == "financial_summary")
async def handle_financial_summary(callback_query: CallbackQuery, bot: Bot):
    try:
        response = requests.get(BACKEND_URL)
        response.raise_for_status()
        orders = response.json()
        
        # Calculate financial metrics
        total_revenue = 0
        total_profit = 0
        daily_revenue = defaultdict(int)
        daily_profit = defaultdict(int)
        product_stats = defaultdict(lambda: {'quantity': 0, 'revenue': 0, 'profit': 0})
        
        for order in orders:
            if order['status'] == 'approved':
                price, profit = calculate_order_price_and_profit(order['product'], order['quantity'])
                total_revenue += price
                total_profit += profit
                
                # Group by date
                date = datetime.fromisoformat(order['created_at'].replace('Z', '+00:00')).strftime('%Y-%m-%d')
                daily_revenue[date] += price
                daily_profit[date] += profit
                
                # Group by product
                product_stats[order['product']]['quantity'] += order['quantity']
                product_stats[order['product']]['revenue'] += price
                product_stats[order['product']]['profit'] += profit
        
        # Calculate average daily revenue and profit
        avg_daily_revenue = total_revenue / len(daily_revenue) if daily_revenue else 0
        avg_daily_profit = total_profit / len(daily_profit) if daily_profit else 0
        
        message = (
            "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞:\n\n"
            f"üìà –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.0f} —Å—É–º\n"
            f"üíµ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:,.0f} —Å—É–º\n"
            f"üìä –°—Ä–µ–¥–Ω—è—è –¥–Ω–µ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {avg_daily_revenue:,.0f} —Å—É–º\n"
            f"üìä –°—Ä–µ–¥–Ω—è—è –¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {avg_daily_profit:,.0f} —Å—É–º\n\n"
            "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º:\n"
        )
        
        # Add product statistics
        for product, stats in product_stats.items():
            message += (
                f"üì¶ {product}:\n"
                f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stats['quantity']} —à—Ç.\n"
                f"   ‚Ä¢ –í—ã—Ä—É—á–∫–∞: {stats['revenue']:,.0f} —Å—É–º\n"
                f"   ‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {stats['profit']:,.0f} —Å—É–º\n\n"
            )
        
        # Show last 7 days
        message += "üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"
        last_7_days = sorted(daily_revenue.items(), reverse=True)[:7]
        for date, revenue in last_7_days:
            profit = daily_profit[date]
            message += (
                f"üìÖ {date}: "
                f"üí∞ {revenue:,.0f} —Å—É–º | "
                f"üíµ {profit:,.0f} —Å—É–º\n"
            )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data="download_financial")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=message,
            reply_markup=keyboard
        )
        
    except Exception as e:
        print(f"Error handling financial summary: {e}")
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )

# Handle top products
@router.callback_query(lambda c: c.data == "top_products")
async def handle_top_products(callback_query: CallbackQuery, bot: Bot):
    try:
        response = requests.get(BACKEND_URL)
        response.raise_for_status()
        orders = response.json()
        
        # Calculate product statistics
        product_stats = defaultdict(lambda: {'quantity': 0, 'revenue': 0, 'profit': 0})
        
        for order in orders:
            if order['status'] == 'approved':
                price, profit = calculate_order_price_and_profit(order['product'], order['quantity'])
                product_stats[order['product']]['quantity'] += order['quantity']
                product_stats[order['product']]['revenue'] += price
                product_stats[order['product']]['profit'] += profit
        
        # Sort by quantity
        sorted_products = sorted(product_stats.items(), key=lambda x: x[1]['quantity'], reverse=True)
        
        message = "üìà –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
        
        for product, stats in sorted_products:
            message += (
                f"üì¶ {product}:\n"
                f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stats['quantity']} —à—Ç.\n"
                f"   ‚Ä¢ –í—ã—Ä—É—á–∫–∞: {stats['revenue']:,.0f} —Å—É–º\n"
                f"   ‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {stats['profit']:,.0f} —Å—É–º\n"
                f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats['revenue']/stats['quantity']:,.0f} —Å—É–º\n\n"
            )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data="download_products")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=message,
            reply_markup=keyboard
        )
        
    except Exception as e:
        print(f"Error handling top products: {e}")
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])
        )